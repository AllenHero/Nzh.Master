(function ($) {
  $.gridDrag = {
    $grid: "",
    tempData: [], //临时数据
    moduleData: [], //组件数据
    initData: [], //init data
    //初始化
    init(mData, defData) {
      this.moduleData = mData;
      this.initData = defData;
      this.$grid = GridStack.init({
        resizable: {
              handles: "e, se, s, sw, w,nw, n, ne",
        },
        minRow: 10,
        animate: true,
        scroll: false,
      });
      this.loadGrid(defData);
      this.gridCallBack();
      this.lockWidget(true);
    },
    //初始化布局
    loadGrid(serData) {
      this.clearGrid();
      // var serialization = localStorage.getItem("grid-layout");
      // var serData1 = serialization ? JSON.parse(serialization) : this.initData;
      // console.log("--serData load", serData);
      this.tempData = [...serData];
      var items = GridStack.Utils.sort(serData);
      this.$grid.batchUpdate();
      var $this = this;
      items.forEach(function (node, i) {
        var item = {
          title: node.title || "标题",
          url: node.url,
          name: node.name,
        };
        $this.renderWidget(item, node);
      });
      this.$grid.commit();
    },
    // 组件操作
    modDataHandle() {
      this.moduleData.forEach((res) => {
        let hasData = this.tempData.filter((item) => {
          return item.name == res.name;
        });
        res.isAdd = hasData.length ? true : false;
      });
      // console.log("--- this.moduleData", this.tempData, this.moduleData);
    },
    //渲染删除
    renderDel() {
      var $that = this;
      $(".grid-stack").on("click", ".widgetDel", function () {
        $that.delWidget(this);
      });
    },
    //锁定/编辑布局
    lockWidget(val) {
      if (val) {
        this.$grid.disable();
        $(".grid-stack .widgetDel").hide();
      } else {
        this.$grid.enable();
        $(".grid-stack .widgetDel").show();
      }
    },

    //添加、删除、更改回调
    gridCallBack() {
      var $this = this;
      this.$grid.on("added", function (e, items) {
        // $this.log("added ", items);
      });
      this.$grid.on("removed", function (e, items) {
        // $this.log("removed ", items);
      });
      this.$grid.on("change", function (e, items) {
        // $this.log("change ", items);
        $this.listChange();
      });
      $this.renderDel();
    },

    //模版处理
    domTemplate(title, url, name) {
      var template = "",
        hasUrl = "";
      //是否包含地址
      if (url) {
        hasUrl = `<iframe src="${url}" width="100%" height="100%" class="widget-url"></iframe>`;
      }
      template = `<div class="grid-stack-item" data-gs-name="${name}"  data-gs-url="${url}">
      <div class="grid-stack-item-content ui-draggable-handle">
        <div class="grid-head">
        <div class="grid-title">${title}</div>
        <div class="grid-btn">
          <button class="btn btn-danger widgetDel"><i class="icon-remove"></i></button>
        </div>
      </div>
      ${hasUrl}
      </div></div>`;
      return template;
    },
    //渲染面板
    renderWidget(item, node) {
      let templateHtml = this.domTemplate(item.title, item.url, item.name);
      this.$grid.addWidget(templateHtml, node);
    },
    //新增面板
    addNewWidget(item) {
      var node = { x: 0, y: 0, width: 5, height: 3, autoPosition: true };
      this.renderWidget(item, node);
      this.listChange();
    },
    //删除当前面板
    delWidget(item) {
      var currDom = $(item).closest(".grid-stack-item");
      var currName = currDom.data("gs-name");
      this.tempData.filter((res, i) => {
        if (res.name == currName) {
          this.tempData.splice(i, 1);
        }
      });
      this.$grid.removeWidget(currDom);
    },
    //面板数据
    listChange() {
      var $that = this;
      $that.tempData = [];
      // console.log("--- grid.engine.nodes", this.$grid.engine.nodes);
      this.$grid.engine.nodes.forEach(function (node) {
        var url = $(node.el).data("gs-url");
        var title = $(node.el).find(".grid-title").html();
        var wName = $(node.el).data("gs-name");
        $that.tempData.push({
          x: node.x,
          y: node.y,
          width: node.width,
          height: node.height,
          title: title,
          url: url,
          name: wName,
        });
      });
      this.log("---currTempData", this.tempData);
    },
    //保存布局
    saveGrid(callback) {
      // localStorage.setItem("grid-layout", JSON.stringify(this.tempData));
     this.log("---saveData", this.tempData);
      if (callback) {
        callback();
      }
    },
    //取消布局
    cancelGrid(){
      this.loadGrid(this.initData);
      this.lockWidget(true);
    },
    //清空布局
    clearGrid() {
      this.$grid.removeAll();
    },
    //自动排列布局
    compactGrid() {
      this.$grid.compact();
    },
    //日志信息
    log(type, items) {
      var str = "";
      items.forEach(function (item) {
        str += " (x,y)=" + item.x + "," + item.y;
      });
      console.log(items, type + items.length + " items." + str);
    },
  };
})(jQuery);
